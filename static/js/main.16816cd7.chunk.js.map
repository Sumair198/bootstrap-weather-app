{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","react","useState","weather","setWeather","cityName","useRef","submit","setSubmit","useEffect","name","current","value","axios","get","then","res","newWeather","data","console","log","Card","className","style","width","Img","variant","src","Body","Title","ref","Text","main","temp","sys","country","description","wind","speed","Button","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAuFeA,MAhFf,WAAgB,IAAD,IAEb,EAA8BC,IAAMC,SAAS,MAA7C,mBAAOC,EAAP,KAAgBC,EAAhB,KACMC,EAAWC,iBAAO,MACxB,EAA4BL,IAAMC,UAAS,GAA3C,mBAAOK,EAAP,KAAeC,EAAf,KAoBA,OAlBAP,IAAMQ,WAAU,WAEd,IAAIC,EAAO,GAETA,EADEL,EAASM,QAAQC,MACf,YAAQP,EAASM,QAAQC,OAGzB,WAENC,IAAMC,IAAN,0DAA6DJ,EAA7D,4CACGK,MAAK,SAACC,GACL,IAAIC,EAAaD,EAAIE,KACrBC,QAAQC,IAAIH,GACZb,EAAWa,QAGd,CAACV,IAGF,8BAwBE,eAACc,EAAA,EAAD,CAAMC,UAAY,MAAMC,MAAO,CAAEC,MAAO,SAAxC,UACE,qDACA,cAACH,EAAA,EAAKI,IAAN,CAAUC,QAAQ,MAAMC,IAAI,yIAC5B,eAACN,EAAA,EAAKO,KAAN,WACE,eAACP,EAAA,EAAKQ,MAAN,WAAY,mDACV,uBAAQC,IAAKzB,OACf,cAACgB,EAAA,EAAKU,KAAN,UAEiB,OAAZ5B,EACC,qCACGA,EAAQO,KADX,WAEE,uDAAmBP,QAAnB,IAAmBA,GAAnB,UAAmBA,EAAS6B,YAA5B,aAAmB,EAAeC,QAClC,wDAAoB9B,QAApB,IAAoBA,GAApB,UAAoBA,EAAS+B,WAA7B,aAAoB,EAAcC,WAClC,kDAAchC,QAAd,IAAcA,OAAd,EAAcA,EAASA,QAAQ,GAAGiC,eAClC,qDAAiBjC,QAAjB,IAAiBA,OAAjB,EAAiBA,EAASkC,KAAKC,YAGjC,8CAGN,cAACC,EAAA,EAAD,CAAQC,QAAS,WACfhC,GAAWD,IACVmB,QAAQ,UAFX,6BChEKe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.16816cd7.chunk.js","sourcesContent":["import react from 'react';\nimport axios from 'axios';\nimport './index.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useRef } from 'react';\nimport { useState } from 'react';\nimport { Button, Card } from 'react-bootstrap'\nfunction App() {\n\n  const [weather, setWeather] = react.useState(null)\n  const cityName = useRef(null);\n  const [submit, setSubmit] = react.useState(false)\n\n  react.useEffect(() => {\n\n    let name = \"\";\n    if (cityName.current.value) {\n      name = `q=${cityName.current.value}`\n    }\n    else {\n      name = `q=lahore`\n    }\n    axios.get(`https://api.openweathermap.org/data/2.5/weather?${name}&appid=d4c08ecfc1903339e1ad0a859c67daa8`)\n      .then((res) => {\n        var newWeather = res.data\n        console.log(newWeather)\n        setWeather(newWeather)\n      });\n\n  }, [submit]);\n\n  return (\n    <div>\n      {/* <h1>City Name:</h1>\n      <input ref={cityName} />\n      \n      <button onClick={() => {\n        setSubmit(!submit)\n      }} >Submit</button>\n      <Button onClick={() => {\n        setSubmit(!submit)\n      }} variant=\"success\">Search</Button>\n      <br />\n      {\n        (weather !== null) ?\n          <>\n            {weather.name} Weather\n            <h1>Temperature : {weather?.main?.temp}</h1>\n            <h1>Country name : {weather?.sys?.country}</h1>\n            <h2>Clouds : {weather?.weather[0].description}</h2>\n            <h2>Wind Speed: {weather?.wind.speed}</h2>\n          </>\n          :\n          <h1>Loading...</h1>\n      } */}\n\n      <Card className = 'abc' style={{ width: '18rem' }}>\n        <h4>Weather Application</h4>\n        <Card.Img variant=\"top\" src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRaBBrQWy8mA1-v89m_tOSTyecUWCTOTcawNJZ0lqKVhuSkV430_Nh87x2oJpqUHaclaXA&usqp=CAU\" />\n        <Card.Body>\n          <Card.Title><h4>Search City name:</h4>\n            <input  ref={cityName} /></Card.Title>\n          <Card.Text>\n            {\n              (weather !== null) ?\n                <>\n                  {weather.name} Weather\n                  <h4>Temperature : {weather?.main?.temp}</h4>\n                  <h4>Country name : {weather?.sys?.country}</h4>\n                  <h4>Clouds : {weather?.weather[0].description}</h4>\n                  <h4>Wind Speed: {weather?.wind.speed}</h4>\n                </>\n                :\n                <h1>Loading...</h1>\n            }\n          </Card.Text>\n          <Button onClick={() => {\n            setSubmit(!submit)\n          }} variant=\"success\">Search</Button>\n        </Card.Body>\n      </Card>\n\n    </div>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}